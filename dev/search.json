[{"path":"https://pharmaverse.github.io/logrx/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 GSK/Atorus JPT Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/adsl_demo.html","id":"axecute-the-adsl-r-script","dir":"Articles","previous_headings":"","what":"axecute the adsl.R script","title":"Logging for an ADSL dataset","text":"simple adsl.R script generated admiral package. Notable features script follows: Calls getting SDTM datasets, e.g. DM, EX, DS Converting SAS blanks NAs Typical derivations need get treatment groups, start/end dates, duration Typical derivation Screen Failures, Screen Flags, Death Flags Creating numeric variables custom format functions Note: compare create warning two objects compared different columns. warning appear log Simple message inserted illustration. message appear log. Manipulated results appear log file.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/adsl_demo.html","id":"inspect-adsl-r-script","dir":"Articles","previous_headings":"axecute the adsl.R script","what":"Inspect adsl.R script","title":"Logging for an ADSL dataset","text":"Feel free explore script. next section showcases output log file script.  NOTE: Users can following axecute script: Use Addin Use logrx::axecute(\"file.R\") directly script [See Vignette TODO] Use logrx::axecute(\"file.R\") console Use logrx::axecute(\"file.R\") batch script [See Vignette TODO]","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/adsl_demo.html","id":"log-output-adsl-r","dir":"Articles","previous_headings":"","what":"Log Output adsl.R","title":"Logging for an ADSL dataset","text":"logrx Metadata User File Information, log contains information version logrx used create log well user file information. Session Information, Packages , External software, Masked Functions, Used Package Functions Program Run Time Information log file contains information everything used run R script. believe information suffices re-create environment needed re-running script. Warning comparison file. Message sent script log file Results appended file","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/adsl_demo.html","id":"comparison-between-production-and-qc-datasets","dir":"Articles","previous_headings":"Log Output adsl.R","what":"Comparison between Production and QC datasets","title":"Logging for an ADSL dataset","text":"illustrative purposes, included comparison file two datasets. can see diffdf::diffdf() correctly picked differences dataset. log file picked warning diffdf::diffdf() placed appropriate section log file.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/approved.html","id":"why-would-i-use-this-feature","dir":"Articles","previous_headings":"","what":"Why would I use this feature?","title":"Logging Unapproved Package and Function Use","text":"main use case feature support traceability package function use within validated environment. Following guidance outlined Risk-Based Approach Assessing R Package Accuracy within Validated Infrastructure, packages selected support use cases, risk assessed mitigated, packages included validated environment use. Section 4.3 paper nicely outlines need trace used need identify package function use risk assessed direct use within validated environment.  4.3. Traceability  {logrx} provides tool! even goes step just logging packages ’ve use, log use function level. gives flexibility assessing risk functions approving functions, rather assess risk entire package use within validated environment.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/logrx/dev/articles/approved.html","id":"create-a-named-list","dir":"Articles","previous_headings":"How do I use this feature?","what":"1. Create a named list","title":"Logging Unapproved Package and Function Use","text":"named list contains functions approved use package. functions package approved use, list “”.","code":"approved_pkgs <- list(   base = \"mean\",   dplyr = \"All\" ) approved_pkgs #> $base #> [1] \"mean\" #>  #> $dplyr #> [1] \"All\""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/approved.html","id":"build-approved-rds","dir":"Articles","previous_headings":"How do I use this feature?","what":"2. Build approved.rds","title":"Logging Unapproved Package and Function Use","text":"Pass named list build_approved() build tibble. create temp directory save illustration.","code":"build_approved(approved_pkgs) #> # A tibble: 294 × 2 #>    function_name         library       #>    <chr>                 <chr>         #>  1 mean                  package:base  #>  2 slice_max             package:dplyr #>  3 expr                  package:dplyr #>  4 src                   package:dplyr #>  5 db_desc               package:dplyr #>  6 group_by_drop_default package:dplyr #>  7 db_commit             package:dplyr #>  8 coalesce              package:dplyr #>  9 data_frame            package:dplyr #> 10 summarize_if          package:dplyr #> # ℹ 284 more rows"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/approved.html","id":"save-as-approved-rds","dir":"Articles","previous_headings":"How do I use this feature?","what":"3. Save as approved.rds","title":"Logging Unapproved Package and Function Use","text":"can use file argument build_approved() save approved.rds instead returning tibble.","code":"dir <- tempdir()  build_approved(approved_pkgs, file = file.path(dir, \"approved.rds\"))"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/approved.html","id":"update-the-logrx-approved-option","dir":"Articles","previous_headings":"How do I use this feature?","what":"4. Update the logrx.approved option","title":"Logging Unapproved Package and Function Use","text":"Update logrx.approved option point approved.rds location. recommend setting .Rprofile.","code":"options(log.rx.approved = file.path(dir, \"approved.rds\"))"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/approved.html","id":"youre-done--lets-axecute","dir":"Articles","previous_headings":"How do I use this feature?","what":"5. You’re done. Let’s axecute!","title":"Logging Unapproved Package and Function Use","text":"logrx take . program executed, packages functions compared approved.rds unapproved use found, logged within “Unapproved Package Functions” section log file.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/approved.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Logging Unapproved Package and Function Use","text":"Let’s write simple script summarizing mean mpg mtcars. save mpg.R temporary directory dir axecute() . log elements “Used Package Functions” “Unapproved Package Functions”. can see used library() package:base pivot_wider package:tidyr. include base library tidyr functions approved list, logged!","code":"library(dplyr, warn.conflicts = FALSE)  results <- mtcars %>%   group_by(cyl) %>%   summarize(mean = mean(mpg)) %>%   mutate(label = \"Mean MPG\")  results %>%   tidyr::pivot_wider(names_from = cyl, values_from = mean, id_cols = label) #> # A tibble: 1 × 4 #>   label      `4`   `6`   `8` #>   <chr>    <dbl> <dbl> <dbl> #> 1 Mean MPG  26.7  19.7  15.1 #> -------------------------------------------------------------------------------- #> -                          Used Package and Functions                          - #> -------------------------------------------------------------------------------- #> {package:base} library, mean #> {package:dplyr} %>%, group_by, summarize, mutate #> {package:tidyr} pivot_wider #> -------------------------------------------------------------------------------- #> -                       Unapproved Package and Functions                       - #> -------------------------------------------------------------------------------- #> {package:base} library #> {package:tidyr} pivot_wider"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/approved.html","id":"a-few-words-of-caution","dir":"Articles","previous_headings":"","what":"A Few Words of Caution","title":"Logging Unapproved Package and Function Use","text":"packages attached top script set consistent ?base::searchpaths() throughout entire script. ensure functions use script linked correct package. lint feature available test scripts follow best practice. functions stored within list, example knitr::opts_chunck$get() knitr::opts_current$get(). currently identify get() knitr function since exported.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/execution.html","id":"methods-of-execution","dir":"Articles","previous_headings":"","what":"Methods of Execution","title":"Generating a Log","text":"find number examples different methods execution, go increasing level complexity increasing level technical knowledge. examples meant starting points interested using logrx complex settings.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/execution.html","id":"axecute","dir":"Articles","previous_headings":"Methods of Execution","what":"axecute()","title":"Generating a Log","text":"easiest execution methods use axecute(). function can used execute code R terminal using command line scripts. log set-around program, code run safely loudly (using safely() purrr).","code":"axecute(\"my_script.R\")"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/execution.html","id":"log_-functions","dir":"Articles","previous_headings":"Methods of Execution","what":"log_*() functions","title":"Generating a Log","text":"log_*() family functions core logrx used internally configure, write, remove log objects. exported functions package, intended used special cases axecute() work. Use log_*() functions following: log_init() create environment log.rx log_config() add core elements log environment, basic elements available time configuration run_safely_loudly() execute program code, capture errors, warnings, messages, output, result. must passed executable R file run create log elements log_write() generate format log log_remove() remove log.rx environment created code execution","code":"log_config(\"my_script.R\") run_safely_loudly(\"my_script.R\") log_write() log_remove()"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/execution.html","id":"command-line-execution","dir":"Articles","previous_headings":"Methods of Execution","what":"Command Line Execution","title":"Generating a Log","text":"executing R terminal nice access one, can also execute code using system command line. done using Rscript -e command executes file using registered Rscript executable. examples use command line execute file create log well manipulate outputs execution. likely advanced examples users. chunk run file my_script.R output standard output created execution file default location. chunk run file my_script.R output standard output created execution file file called temp.log. output can later accessed user want check output file execution. chunk run file my_script.R output standard output created execution file file called temp.log. take contents temp.log file add end log file generated file execution remove temporary output log.","code":"Rscript -e \"logrx::axecute('my_script.R', log_name = 'my_script.log', log_path = '.')\" Rscript -e \"logrx::axecute('my_script.R', log_name = 'my_script.log', log_path = '.')\" > temp.log 2>&1 Rscript -e \"logrx::axecute('my_script.R', log_name = 'my_script.log', log_path = '.')\" > temp.log 2>&1; cat my_script.log >> my_script.log; rm my_script.log"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/execution.html","id":"scripting-with-logrx","dir":"Articles","previous_headings":"","what":"Scripting with logrx","title":"Generating a Log","text":"logrx built around creating log program can just easily used running entire set programs. axecute() function built single file execution scripted file execution mind. use simple functions lapply() scripting easy. sample code lapply() can used axecute(). scripting needs work contents directory instead pre-defined list, functions list.files can used obtain list files use. example can applied practice getting files ending .R current working directory using regular expression, using lapply() run files using axecute(). Additionally, need code run using shell scripting language bash files can created run using previously outlined Command Line Execution examples. scripting examples can translated variety different scripting languages. example bash script executed directory R files, execute R files directory using axecute() create corresponding set log files.","code":"lapply(c(\"file.R\", \"otherfile.R\"), axecute) r_script_list <- list.files(path = \".\", pattern = \"\\\\.R$\") lapply(r_script_list, axecute) for file in *.R; do     [ -f \"$file\" ] || continue     Rscript -e \"logrx::axecute('$file')\" done"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/logrx.html","id":"generating-a-log","dir":"Articles","previous_headings":"","what":"Generating a log","title":"logrxpackage","text":"purpose logrx package generate log upon execution R script enables traceability reproducibility executed code. Generating log logrx can simple running one line code seen example use axecute() function.. However, logrx much advanced capabilities meet demands Clinical Reporting. learn additional techniques executing code logrx please visit Execution Vignette.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/logrx.html","id":"axecute","dir":"Articles","previous_headings":"Generating a log","what":"axecute()","title":"logrxpackage","text":"axecute() enables command line submission program. log set-around program, code run safely loudly (using safely() purrr package). log generated folder script unless specify differently.","code":"axecute(\"my_script.R\")"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/logrx.html","id":"logrx-addin","dir":"Articles","previous_headings":"Generating a log","what":"logrx addin:","title":"logrxpackage","text":"log can generated using logrx addin, simple point click interface allows run single program. Addin ships package available use install package. gif Get Started page gives quick snapshot intended use.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/logrx.html","id":"log-attributes","dir":"Articles","previous_headings":"","what":"Log attributes","title":"logrxpackage","text":"compiled brief overview information capture log file generated logrx. allow users customize sections log based needs log, e.g. can toggle /messages, outputs, errors messages. can also build log approved unapproved packages used R script - see Logging Unapproved Package Function Use additional guidance following attributes recorded log: Version package Type build Link GitHub repository User generated log Name path script log generated hash_sum: unique hashsum created log file R version OS system GUI Language timezone Packages - List available packages environment External Software - List external software Repo URLs (optional) - URLs repositories use install.packages() updated.packages() Masked Functions - List functions masked packages Program Run Time Information - Start, end, run times Used Package Functions (optional) - List packages functions used script log generated Unapproved Package Functions (optional) - List packages functions used script log generated part approved list packages functions Errors Warnings - List Errors Warnings Script Messages, Output Results (optional) - List Messages, Outputs Results Extra Info (optional) - Extra info use can manually add via list object Log Output File - Name path log scrollable example included log file adsl.R script.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/options.html","id":"log-rx-lint","dir":"Articles","previous_headings":"","what":"log.rx.lint","title":"logrx Options","text":"“lintr provides static code analysis R. checks adherence given style, identifying syntax errors possible semantic issues, reports can take action.”  Linting can help enforce best practice variety topics including code readability, efficiency, style, consistency, etc. can find available linters , create .  organization like implement linters, can set log.rx.lint option globally specific set checks run results recorded log every script executed.  recommended use lintr::library_call_linter(). ensure logrx find correct package functions used.  Hester J, Angly F, Hyde R, Chirico M, Ren K, Rosenstock , Patil (2022). lintr: ‘Linter’ R Code. https://github.com/r-lib/lintr, https://lintr.r-lib.org.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/options.html","id":"log-rx-approved","dir":"Articles","previous_headings":"","what":"log.rx.approved","title":"logrx Options","text":"See Logging Unapproved Package Function Use additional details.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/tables.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"1. Load the packages","title":"Logging for Summary Display Table","text":"First, load packages use generate risk-difference table.","code":"library(haven) library(magrittr) library(Tplyr)"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/tables.html","id":"load-the-data","dir":"Articles","previous_headings":"","what":"2. Load the data","title":"Logging for Summary Display Table","text":"load Adverse Event Analysis Dataset PHUSE Test Data Factory ADaM dataset. data stored transport file format use haven package load .","code":"adae <- read_xpt(\"adae.xpt\")"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/tables.html","id":"build-the-risk-difference-table","dir":"Articles","previous_headings":"","what":"3. Build the risk-difference table","title":"Logging for Summary Display Table","text":"Finally, write script (risk_diff.R) build risk-difference table, using Typlr package.","code":"t <- tplyr_table(adae, TRTA) %>%   add_layer(     group_count(RACE) %>%       set_distinct_by(USUBJID) %>%       add_risk_diff(         c(\"Xanomeline High Dose\", \"Placebo\"),         c(\"Xanomeline Low Dose\", \"Placebo\")       )   )  build(t)"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/tables.html","id":"axecute-the-script","dir":"Articles","previous_headings":"","what":"4. Axecute the script","title":"Logging for Summary Display Table","text":"axecute following script. log. Pay special attention Warnings Result sections.","code":"axecute(file.path(dir, \"risk_diff.R\"))"},{"path":"https://pharmaverse.github.io/logrx/dev/articles/tidylog.html","id":"logging-a-simple-script-with-logrx-and-tidylog","dir":"Articles","previous_headings":"","what":"Logging a simple script with {logrx} and {tidylog}","title":"Logging with {tidylog}","text":"simple script using us_rent_income dataset. explore just functions available tidyr dplyr: pivot_wider, arrange, distinct, bind_cols left_join.   Using axecute(ex1_tidylog.R) produce log file. snapshot just pertinent information users interested tidylog feedback. feedback placed logrx package Messages, Output, Result section log.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/articles/tidylog.html","id":"logging-an-adsl-script-with-logrx-and-tidylog","dir":"Articles","previous_headings":"","what":"Logging an ADSL script with {logrx} and {tidylog}","title":"Logging with {tidylog}","text":"Now use R script creates ADSL dataset get log file. file generated using admiral package creating ADaM datasets. can quickly generate file using following command admiral::use_ad_template(\"adsl\"). Feel free explore script. next section showcases output log file used axecute script.   showcase feedback script relevant discussion tidylog. , logrx package places feedback tidylog Messages, Output, Resultsection log file.   Success!! just axecuted two scripts using logrx tidylog. Remember feedback tidylog placed Messages, Output, Result section log file.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nathan Kosiba. Author, maintainer. Thomas Bermudez. Author. Ben Straub. Author. Michael Rimler. Author. Nicholas Masel. Author. Sam Parmar. Author. GSK/Atorus JPT. Copyright holder, funder.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kosiba N, Bermudez T, Straub B, Rimler M, Masel N, Parmar S (2025). logrx: Logging Utility Focus Clinical Trial Programming Workflows. R package version 0.3.2.9000, https://github.com/pharmaverse/logrx.","code":"@Manual{,   title = {logrx: A Logging Utility Focus on Clinical Trial Programming Workflows},   author = {Nathan Kosiba and Thomas Bermudez and Ben Straub and Michael Rimler and Nicholas Masel and Sam Parmar},   year = {2025},   note = {R package version 0.3.2.9000},   url = {https://github.com/pharmaverse/logrx}, }"},{"path":"https://pharmaverse.github.io/logrx/dev/index.html","id":"logrx-","dir":"","previous_headings":"","what":"A Logging Utility Focus on Clinical Trial Programming Workflows","title":"A Logging Utility Focus on Clinical Trial Programming Workflows","text":"goal logrx facilitate logging clinical environment goal making code easily traceable reproducible.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Logging Utility Focus on Clinical Trial Programming Workflows","text":"package available CRAN can installed running: get latest development version use:","code":"install.packages(\"logrx\") devtools::install_github(\"pharmaverse/logrx\", ref = \"dev\")"},{"path":"https://pharmaverse.github.io/logrx/dev/index.html","id":"what-is-logrx-","dir":"","previous_headings":"","what":"What is {logrx} ?","title":"A Logging Utility Focus on Clinical Trial Programming Workflows","text":"Simple! logrx package makes log file R script!. short gif making log file adsl.R script using Addin. details parts log script found Get Started several vignettes show specific use cases using package.  many packages facilitate logging code already exist R ecosystem, hard find solution works well clinical programming applications. Many logging implementations implicit rely user input create log execution script. useful logging specific events application, clinical programming log set purpose. logrx built around concept creating log execution R script provides overview happened well environment happened . set create flexible logging utility provide necessary information anyone reviewing code execution can recreate execution environment run code . logrx purpose-built needs clinical programming capture necessary elements environment execution able create complete view program execution.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/index.html","id":"using-logrx","dir":"","previous_headings":"","what":"Using logrx","title":"A Logging Utility Focus on Clinical Trial Programming Workflows","text":"logrx can used file scripting. information use logrx can found Get Started Articles Execution Use Cases.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/approved.html","id":null,"dir":"Reference","previous_headings":"","what":"Approved packages and functions — approved","title":"Approved packages and functions — approved","text":"dataset stores approved packages functions use. row contains library function_name. dataset used illustrate data format stored log.rx.approved option.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/approved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approved packages and functions — approved","text":"","code":"approved"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/approved.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Approved packages and functions — approved","text":"tibble 6 rows 2 variables: function_name Name function library Name package","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/approved.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approved packages and functions — approved","text":"","code":"logrx::approved #> # A tibble: 6 × 2 #>   function_name library       #>   <chr>         <chr>         #> 1 library       package:base  #> 2 %>%           package:dplyr #> 3 group_by      package:dplyr #> 4 summarize     package:dplyr #> 5 mean          package:base  #> 6 pivot_wider   package:tidyr"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/axecute.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of a log and axecution of a file — axecute","title":"Creation of a log and axecution of a file — axecute","text":"axecute() creates log, executes file, returns 0 errors 1 errors","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/axecute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of a log and axecution of a file — axecute","text":"","code":"axecute(   file,   log_name = NA,   log_path = NA,   include_rds = FALSE,   quit_on_error = TRUE,   to_report = c(\"messages\", \"output\", \"result\"),   show_repo_url = FALSE,   extra_info = NA,   ... )"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/axecute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of a log and axecution of a file — axecute","text":"file String. Path file execute log_name String. Name log file log_path String. Path log file include_rds Boolean. Option export log object Rds file. Defaults FALSE quit_on_error Boolean. session quit status 1 error? Defaults TRUE to_report String vector. Objects optionally report, may include many necessary: messages: messages generated program execution output: output generated program execution result: result generated program execution show_repo_url Boolean. repository URLs reported Defaults FALSE extra_info List. Objects optionally add end log special extra info section. List printed YAML format. Optional ... used","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/axecute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creation of a log and axecution of a file — axecute","text":"0 errors 1 errors","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/axecute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creation of a log and axecution of a file — axecute","text":"","code":"dir <- tempdir() text <- 'print(\"Hello, logrxperson!\")' fileConn <- file(file.path(dir, \"hello.R\")) writeLines(text, fileConn) close(fileConn)  axecute(file.path(dir, \"hello.R\")) #> [1] \"Hello, logrxperson!\"   fileConn <- file(file.path(dir, \"hello.Rmd\")) writeLines(text, fileConn) close(fileConn)  axecute(file.path(dir, \"hello.Rmd\")) #>  #>  #> processing file: hello.Rmd #> 1/1 #> output file: hello.knit.md #> /usr/bin/pandoc +RTS -K512m -RTS hello.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output hello.html --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/latex-div.lua --embed-resources --standalone --variable bs3=TRUE --section-divs --template /home/runner/work/_temp/Library/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --variable theme=bootstrap --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /tmp/Rtmp5Pe4bU/rmarkdown-str67a355692aec.html  #>  #> Output created: hello.html #>  #>  #> processing file: /tmp/Rtmp5Pe4bU/hello.Rmd #> 1/1 #> output file: /tmp/Rtmp5Pe4bU/file67a3148de925.R"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/build_approved.html","id":null,"dir":"Reference","previous_headings":"","what":"Build approved packages and functions tibble — build_approved","title":"Build approved packages and functions tibble — build_approved","text":"utility function help build approved packages functions list. can used logrx log unapproved use packages functions.","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/build_approved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build approved packages and functions tibble — build_approved","text":"","code":"build_approved(pkg_list, file = NULL)"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/build_approved.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build approved packages and functions tibble — build_approved","text":"pkg_list Named list character vectors: Name package name Value character vector approved functions '' file String. Name file approved tibble written . specified, tibble returned Default: NULL Permitted Files: .RDS","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/build_approved.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build approved packages and functions tibble — build_approved","text":"Tibble two columns (library, function) one row per function","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/build_approved.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build approved packages and functions tibble — build_approved","text":"details see vignette: vignette(\"approved\", package = \"logrx\")","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/build_approved.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build approved packages and functions tibble — build_approved","text":"","code":"approved_pkgs <- list(   base = c(\"library\", \"mean\"),   dplyr = \"All\" )  # build and return build_approved(approved_pkgs) #> # A tibble: 295 × 2 #>    function_name         library       #>    <chr>                 <chr>         #>  1 library               package:base  #>  2 mean                  package:base  #>  3 slice_max             package:dplyr #>  4 expr                  package:dplyr #>  5 src                   package:dplyr #>  6 db_desc               package:dplyr #>  7 group_by_drop_default package:dplyr #>  8 db_commit             package:dplyr #>  9 coalesce              package:dplyr #> 10 data_frame            package:dplyr #> # ℹ 285 more rows  # build and save dir <- tempdir() build_approved(approved_pkgs, file.path(dir, \"approved.rds\"))"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configuration of the log.rx environment — log_config","title":"Configuration of the log.rx environment — log_config","text":"log_config() initialises log.rx environment, adds attributes, sets ","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configuration of the log.rx environment — log_config","text":"","code":"log_config(file = NA, log_name = NA, log_path = NA, extra_info = NA)"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configuration of the log.rx environment — log_config","text":"file String. Path file executed. Optional log_name String. Name log file. Optional log_path String. Path log file. Optional extra_info List. Objects add end log special extra info section. Optional","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configuration of the log.rx environment — log_config","text":"Nothing","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configuration of the log.rx environment — log_config","text":"","code":"dir <- tempdir() text <- 'print(\"Hello, Timberperson!\")' fileConn <- file(file.path(dir, \"hello.R\")) writeLines(text, fileConn) close(fileConn)  file <- file.path(dir, \"hello.R\")  # Initialise and configure the log.rx environment log_config(file)  # Run the script and record results, outputs, messages, errors, and warnings logrx:::run_safely_loudly(file) #> [1] \"Hello, Timberperson!\"  # Write the log log_write(file)"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization of the log.rx environment — log_init","title":"Initialization of the log.rx environment — log_init","text":"log_init() initialises log.rx environment","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialization of the log.rx environment — log_init","text":"","code":"log_init()"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization of the log.rx environment — log_init","text":"Nothing","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization of the log.rx environment — log_init","text":"","code":"# Initialise the log.rx environment log_init()  # Remove the log.rx environment log_remove()"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"log.rx object removal — log_remove","title":"log.rx object removal — log_remove","text":"log_remove() removes log.rx object setting options(\"log.rx\") NULL","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"log.rx object removal — log_remove","text":"","code":"log_remove()"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"log.rx object removal — log_remove","text":"Nothing","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_remove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"log.rx object removal — log_remove","text":"","code":"# Initialise the log.rx environment log_init()  # Remove the log.rx environment log_remove()"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting and writing of the log.rx object to a log file — log_write","title":"Formatting and writing of the log.rx object to a log file — log_write","text":"log_write() gets formats content log.rx writing log file","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting and writing of the log.rx object to a log file — log_write","text":"","code":"log_write(   file = NA,   remove_log_object = TRUE,   show_repo_url = FALSE,   include_rds = FALSE,   extra_info = NA,   to_report = c(\"messages\", \"output\", \"result\") )"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting and writing of the log.rx object to a log file — log_write","text":"file String. Path file executed remove_log_object Boolean. log object removed writing log file? Defaults TRUE show_repo_url Boolean. repo URLs reported Defaults FALSE include_rds Boolean. Option export log object Rds file. Defaults FALSE extra_info List. Objects add end log special extra info section. Optional to_report String vector. Objects optionally report; additional information axecute","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting and writing of the log.rx object to a log file — log_write","text":"Nothing","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/log_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting and writing of the log.rx object to a log file — log_write","text":"","code":"dir <- tempdir() text <- 'print(\"Hello, Timberperson!\")' fileConn <- file(file.path(dir, \"hello.R\")) writeLines(text, fileConn) close(fileConn)  file <- file.path(dir, \"hello.R\")  # Initialise and configure the log.rx environment log_config(file)  # Run the script and record results, outputs, messages, errors, and warnings logrx:::run_safely_loudly(file) #> [1] \"Hello, Timberperson!\"  # Write the log log_write(file)"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/read_log_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and parse logrx file — read_log_file","title":"Read and parse logrx file — read_log_file","text":"Read parse logrx file","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/read_log_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and parse logrx file — read_log_file","text":"","code":"read_log_file(file)"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/read_log_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and parse logrx file — read_log_file","text":"file String. Path logrx log file","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/read_log_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and parse logrx file — read_log_file","text":"Tibble. Object includes nested parsed content","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/read_log_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and parse logrx file — read_log_file","text":"","code":"if (FALSE) { # \\dontrun{ read_log_file(previous_log_filepath) } # }"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_log_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting of log file section headers — write_log_header","title":"Formatting of log file section headers — write_log_header","text":"write_log_header formats string returns formatted log file section header","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_log_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting of log file section headers — write_log_header","text":"","code":"write_log_header(title_string)"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_log_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting of log file section headers — write_log_header","text":"title_string String. Used section title","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_log_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting of log file section headers — write_log_header","text":"Vector strings. Formatted log file section header","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_log_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting of log file section headers — write_log_header","text":"","code":"if (FALSE) { # \\dontrun{ write_log_header(\"Section Header\") } # }"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_unapproved_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats and returns a vector of unapproved functions — write_unapproved_functions","title":"Formats and returns a vector of unapproved functions — write_unapproved_functions","text":"write_unapproved_functions() gets log.rx unapproved_packages_functions attribute, formats returns list unapproved functions","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_unapproved_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats and returns a vector of unapproved functions — write_unapproved_functions","text":"","code":"write_unapproved_functions()"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_unapproved_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats and returns a vector of unapproved functions — write_unapproved_functions","text":"Formatted vector unapproved functions","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_unapproved_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats and returns a vector of unapproved functions — write_unapproved_functions","text":"","code":"if (FALSE) { # \\dontrun{ write_unapproved_functions() } # }"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_used_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats and returns a vector of used package functions — write_used_functions","title":"Formats and returns a vector of used package functions — write_used_functions","text":"write_used_functions() gets log.rx used_packages_functions attribute, formats returns list used package functions","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_used_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats and returns a vector of used package functions — write_used_functions","text":"","code":"write_used_functions()"},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_used_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats and returns a vector of used package functions — write_used_functions","text":"Formatted vector used package functions","code":""},{"path":"https://pharmaverse.github.io/logrx/dev/reference/write_used_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats and returns a vector of used package functions — write_used_functions","text":"","code":"if (FALSE) { # \\dontrun{ write_used_functions() } # }"}]
